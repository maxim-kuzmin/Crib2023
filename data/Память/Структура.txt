# Структура (struct)

## Как

- Объявление:

```
// Несмотря на что структура - значимый тип,
// она может содержать поля и свойства как
// значимого, так и ссылочного типов.
// Наследоваться может только от инетерфейсов,
// от других структур - нет.
struct Person
{
    // Можно задавать публичные поля.
    public string name;

    // Можно задавать приватные поля.
    private readonly int age;

    // Можно инициализировать поля при объявлении.
    public bool isMale = true;

    // Можно задавать свойства.
    public List<string> Children { get; set; } = new List<string>();

    // Можно задавать конструктор по умолчанию, но если его не задать,
    // он будет создан автоматически.
    // Если вызвать конструктор по умолчанию, поле "age" будет
    // проинициализировано значением по умолчанию.
    public Person()
    {
        // Можно инициализировать поля в конструкторе.
        name = "";
    }

    // Можно инициализировать поля, передав их значения в параметрах
    // конструктора.
    // Если не передать в конструктор значение параметра name,
    // оно будет равно "Tom".
    public Person(int age, string name = "")
    {
        this.age = age;
        this.name = name;
    }

    // Можно задавать методы.
    public void Print()
    {
        Console.WriteLine($$"""
            имя: "{{name}}",
            возраст: "{{age}}",
            пол: "{{(isMale ? "мужской" : "женский")}}",
            дети: "{{(Children.Any() ? "есть" : "нет")}}"
            """);
    }
}
```

- Использование:

```
Person person = new();

person.Print();

// имя: "",
// возраст: "0",
// пол: "мужской",
// дети: "нет"

person = new(42);

person.Print();

// имя: "",
// возраст: "42",
// пол: "мужской",
// дети: "нет"

person = new(42, "Tom");

person.Print();

// имя: "Tom",
// возраст: "42",
// пол: "мужской",
// дети: "нет"

person.name = "Toma";
person.isMale = false;

person.Print();

// имя: "Toma",
// возраст: "42",
// пол: "женский",
// дети: "нет"

person = new()
{
    name = "Toma",
    isMale = false
};

person.Children.Add("Max");

person.Print();

// имя: "Toma",
// возраст: "0",
// пол: "женский",
// дети: "есть"
```

Сравнение осущетсвляется по значению полей и свойств, поэтому при наличии полей или свойств ссылочного типа их значения будут сравниваться по содержащимся в них ссылкам.

## Зачем

Создание пользовательского значимого типа.

## Почему

Встроенных значимых типов может оказаться недостаточно, поэтому предусмотрена возможность создания пользовательских.